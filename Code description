### **Code Description for Longest Repeat in Genomic Sequences**

This Python script analyzes a genomic sequence from a FASTA file to find the **longest repeated substring** using **suffix arrays (SA)** and **longest common prefix (LCP) arrays**. It leverages an efficient **suffix sorting library (`pydivsufsort`)** for suffix array construction and implements **a linear-time algorithm** for LCP computation.

---

## **1. Code Overview**
The script follows these key steps:
1. **Reads the input sequence from a FASTA file** (ignoring headers).
2. **Constructs the suffix array (SA)** using the `pydivsufsort` library.
3. **Computes the longest common prefix (LCP) array** using a custom linear-time algorithm.
4. **Identifies the longest repeated substring** from SA and LCP values.
5. **Outputs the length, occurrences, execution time, and memory usage**.

---

## **2. Function Breakdown**
### **a) `compute_suffix_array(text)`**
- **Input:** A string `text` representing the genomic sequence.
- **Process:** Uses `divsufsort.divsufsort(text)` to compute the **suffix array**.
- **Output:** Returns the **suffix array (SA)**, which is an array of starting indices of lexicographically sorted suffixes.

### **b) `compute_lcp(text, SA)`**
- **Input:** 
  - `text`: The input genomic sequence.
  - `SA`: The suffix array of `text`.
- **Process:** 
  - Builds a **rank array**, storing the index of each suffix in `SA`.
  - Computes the **LCP values** in linear time using the rank array.
  - Uses a **two-pointer technique** to efficiently compute common prefixes between consecutive suffixes.
- **Output:** Returns the **LCP array**, where `LCP[i]` is the length of the longest common prefix between `SA[i]` and `SA[i-1]`.

### **c) `longest_repeat(text, SA, LCP)`**
- **Input:** 
  - `text`: The input genomic sequence.
  - `SA`: The suffix array.
  - `LCP`: The LCP array.
- **Process:** 
  - Finds the **maximum LCP value**.
  - Extracts all **occurrences of the longest repeated substring**.
  - **Tracks the starting positions** of all occurrences.
  - Returns the longest repeat along with its **length and positions** in `text`.
- **Output:** Tuple containing:
  - **Length of longest repeat**
  - **List of starting positions**
  - **The longest repeated substring**

### **d) `load_fasta(filename)`**
- **Input:** `filename` (path to a FASTA file).
- **Process:** Reads the file, **ignores FASTA headers**, and concatenates the DNA sequence.
- **Output:** Returns the complete sequence as a string.

### **e) `main()`**
- Reads the **FASTA sequence**.
- Computes **suffix array (SA)**.
- Computes **longest common prefix array (LCP)**.
- Identifies the **longest repeated substring**.
- Measures **execution time and memory usage**.
- Prints the **results**, including:
  - **Length of longest repeat**
  - **Positions where it occurs**
  - **Wall-clock time for execution**
  - **Peak memory usage**

---

## **3. Example Execution**
```sh
python3 longest_repeat.py sequence.fasta
```
**Expected Output:**
```
Input text length: 57227415 characters

RESULTS:
---------
Length of the longest repeat: 156
Longest repeated substring: 'ATATGCTG... (truncated for clarity)'
Starting positions of the longest repeat: [432112, 789234, 1209483]
Wall-clock time for SA and LCP construction: 5.342180 seconds
Peak memory usage: 105620 KB
```

---

## **4. Algorithm Complexity**
| Step | Algorithm | Complexity |
|------|-----------|------------|
| **Suffix Array (SA) Construction** | `divsufsort` (O(n log n)) | **O(n log n)** |
| **LCP Array Computation** | Kasai Algorithm | **O(n)** |
| **Finding Longest Repeat** | Linear Scan | **O(n)** |
| **Total Complexity** | O(n log n) + O(n) | **O(n log n)** |

---

This description provides a structured breakdown of what each function does and how the algorithm works. Let me know if you need more details! ðŸš€
